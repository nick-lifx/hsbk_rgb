// generated by ../prepare/gamma_decode_gen_c_float.py

// Copyright (c) 2020 Nick Downing
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#include <assert.h>
#include <math.h>
#include "gamma_decode_{0:s}.h"

static float post_factor[] = {{{1:s}
}};

// returns approximation to:
//   x < {2:s}f * {3:s}f ? x / {4:s}f : powf((x + {5:s}f) / {6:s}f, {7:s}f)
// allowed domain (-inf, {8:s}), recommended domain [-epsilon, 1 + epsilon)
// do not call with argument >= {9:s} due to table lookup overflow (unchecked)
// minimax error is up to {10:e} relative
float gamma_decode_{11:s}(float x) {{
  if (x < {12:.8e}f)
    return x * {13:.8e}f;
  int exp;
  x = frexpf(x + {14:.8e}f, &exp);
  assert(exp < {15:d});
  float y = {16:.8e}f;
{17:s}  return y * post_factor[exp + {18:d}];
}}

#ifdef STANDALONE
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s x\n"
        "x = gamma encoded intensity, calculates linear intensity\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  float x = atof(argv[1]);

  float y = gamma_decode_{19:s}(x);
  printf("gamma encoded %.6f -> linear %.6f\n", x, y);

  return EXIT_SUCCESS;
}}
#endif

#!/usr/bin/env python3
# generated by ../prepare/xy_to_rtheta_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy

XY_x = 0
XY_y = 1
N_XY = 2

RTHETA_r = 0
RTHETA_theta = 1
N_RTHETA = 2

# returns approximation to:
#   math.sqrt(x ** 2 + y ** 2), atan2(y, x)
# x and y cannot both be 0 (but can be arbitrarily small)
# minimax error is up to 1.715430e-07 relative resp. 1.160520e-07 absolute
def xy_to_rtheta(xy):
  x = xy[XY_x]
  y = xy[XY_y]

  theta = 0.
  if y >= x:
    theta = 3.1415926535897931e+00 if y >= 0. else -3.1415926535897931e+00
    x = -x
    y = -y
  if y < -x:
    theta -= 1.5707963267948966e+00
    x, y = -y, x

  slope = y / x
  slope2 = slope * slope

  r = -2.6054414960915940e-03
  r = r * slope2 + 1.2785697060720315e-02
  r = r * slope2 - 3.1568629336260694e-02
  r = r * slope2 + 6.0294803960331100e-02
  r = r * slope2 - 1.2467479204615568e-01
  r = r * slope2 + 4.9998158114449415e-01
  r = r * slope2 + 1.0000001715430289e+00

  s = 5.9510726380696344e-03
  s = s * slope2 - 3.0660224956957999e-02
  s = s * slope2 + 7.5694211264457759e-02
  s = s * slope2 - 1.2976011563690215e-01
  s = s * slope2 + 1.9722913580569049e-01
  s = s * slope2 - 3.3304551192512083e-01
  s = s * slope2 + 9.9998971226021360e-01
  s *= slope

  return numpy.array([x * r, theta + s], numpy.double)

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 3:
    print(f'usage: {sys.argv[0]:s} x y')
    print('(x, y) = Euclidean coordinates, calculates (r, theta) = polar coordinates')
    print('x, y cannot both be 0')
    sys.exit(EXIT_FAILURE)
  xy = numpy.array([float(i) for i in sys.argv[1:3]], numpy.double)

  rtheta = xy_to_rtheta(xy)
  print(f'xy ({xy[XY_x]:.6f}, {xy[XY_y]:.6f}) -> rtheta ({rtheta[RTHETA_r]:.6f}, {rtheta[RTHETA_theta]:.6f})')

#!/usr/bin/env python3
# generated by ../prepare/gamma_encode_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy

post_factor = numpy.array(
  [
    9.9212565748012460e-02,
    1.3243288679491189e-01,
    1.7677669529663687e-01,
    2.3596857817042335e-01,
    3.1498026247371830e-01,
    4.2044820762685725e-01,
    5.6123102415468651e-01,
    7.4915353843834076e-01,
    1.0000000000000000e+00,
    1.3348398541700344e+00
  ],
  numpy.double
)

# returns approximation to:
#   x * 12.92 if x < .0031308 else (x ** (1. / 2.4) * 1.055) - .055
# allowed domain (-inf, 2), recommended domain [-epsilon, 1 + epsilon]
# do not call with argument >= 2 due to table lookup overflow (unchecked)
# minimax error is up to 2.089029e-08 on domain [.5, 1]
def gamma_encode(x):
  if x < .0031308:
    return x * 12.92
  x, exp = math.frexp(x)
  assert exp < 2
  y = 1.5510671045708141e-01
  y = y * x - 9.5313721143243602e-01
  y = y * x + 2.5724148231272337e+00
  y = y * x - 4.0164296642648258e+00
  y = y * x + 4.0461757676546011e+00
  y = y * x - 2.8522949272325429e+00
  y = y * x + 1.8423717384802476e+00
  y = y * x + 2.6079278410089901e-01
  return y * post_factor[exp + 8] - .055

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 2:
    print(f'usage: {sys.argv[0]:s} x')
    print('x = linear intensity, calculates gamma encoded intensity')
    sys.exit(EXIT_FAILURE)
  x = float(sys.argv[1])

  y = gamma_encode(x)
  print(f'linear {x:.6f} -> gamma encoded {y:.6f}')

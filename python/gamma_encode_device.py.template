#!/usr/bin/env python3
# generated by ../prepare/gamma_encode_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy

post_factor = numpy.array(
  [{post_factor:s}
  ],
  numpy.double
)

# returns approximation to:
#   x * {str_gamma_b:s} if x < {str_gamma_a:s} else (x ** (1. / {str_gamma_e:s}) * {str_gamma_d:s}) - {str_gamma_c:s}
# allowed domain (-inf, 2), recommended domain [-epsilon, 1 + epsilon]
# do not call with argument >= 2 due to table lookup overflow (unchecked)
# minimax error is up to {err:e} relative
def gamma_encode_{device:s}(x):
  if x < {gamma_b:.16e}:
    return x * {gamma_a:.16e}
  x, exp = math.frexp(x)
  assert exp < {exp1_plus_one:d}
  y = {p_last:.16e}
{p:s}  return y * post_factor[exp + {minus_exp0:d}] - {gamma_c:.16e}

# standalone
if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 2:
    print(f'usage: {{sys.argv[0]:s}} x')
    print('x = linear intensity, calculates gamma encoded intensity')
    sys.exit(EXIT_FAILURE)
  x = float(sys.argv[1])

  y = gamma_encode_{device:s}(x)
  print(f'linear {{x:.6f}} -> gamma encoded {{y:.6f}}')

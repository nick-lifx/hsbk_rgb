#!/usr/bin/env python3
# generated by ../prepare/mired_to_rgb_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import numpy

EPSILON = 1e-6

def mired_to_rgb(mired):
  # validate inputs, allowing a little slack
  assert mired >= 6.6666666666666671e+01 - EPSILON and mired < 1.0000000000000000e+03 + EPSILON

  # calculate red channel
  if mired < 1.5301383549813866e+02:
    r = 3.9570969341603083e-09
    r = r * mired + 8.8076156789390517e-06
    r = r * mired + 1.2887035144944002e-03
    r = r * mired + 5.8241927431118612e-01
  else:
    r = 1.0000000000000000e+00

  # calculate green channel
  if mired < 1.5338751040011459e+02:
    g = -3.2321841544216369e-09
    g = g * mired + 5.6229842258534628e-06
    g = g * mired + 1.0736686414370682e-03
    g = g * mired + 6.9132967045396287e-01
  else:
    g = -2.8975567908663250e-15
    g = g * mired + 7.5129471269135735e-12
    g = g * mired + -8.1342036838629593e-09
    g = g * mired + 5.1278251261015950e-06
    g = g * mired + -2.8329079047212631e-03
    g = g * mired + 1.3159775950492181e+00

  # calculate blue channel
  if mired < 1.5275887684578757e+02:
    b = 1.0000000000000000e+00
  elif mired < 5.2596002046577303e+02:
    b = -3.1048051995343442e-18
    b = b * mired + 5.4012210596554102e-15
    b = b * mired + -3.5254698569231522e-12
    b = b * mired + 9.6273467502446168e-10
    b = b * mired + -3.4295315629752924e-08
    b = b * mired + -3.0987942108972432e-05
    b = b * mired + 1.2405806853715785e-03
    b = b * mired + 1.3622628267941306e+00
  else:
    b = 0.0000000000000000e+00

  return numpy.array([r, g, b], numpy.double)

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  RGB_RED = 0
  RGB_GREEN = 1
  RGB_BLUE = 2
  N_RGB = 3

  if len(sys.argv) < 2:
    print(f'usage: {sys.argv[0]:s} mired')
    print('mired = colour temperature in micro reciprocal degrees Kelvin')
    sys.exit(EXIT_FAILURE)
  mired = float(sys.argv[1])

  rgb = mired_to_rgb(mired)
  print(
    f'mired {mired:.3f} -> RGB ({rgb[RGB_RED]:.6f}, {rgb[RGB_GREEN]:.6f}, {rgb[RGB_BLUE]:.6f})'
  )

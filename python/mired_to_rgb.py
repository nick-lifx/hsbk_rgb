#!/usr/bin/env python3
# generated by ../prepare/mired_to_rgb_gen_py.py

import numpy

EPSILON = 1e-6

def mired_to_rgb(mired):
  # validate inputs, allowing a little slack
  assert mired >= 6.6666666666666671e+01 - EPSILON
  assert mired < 1.0000000000000000e+03 + EPSILON

  # calculate red channel
  if mired < 1.5301383555647345e+02:
    r = 3.9570929278006819e-09
    r = r * mired + 8.8076169288468523e-06
    r = r * mired + 1.2887033889366927e-03
    r = r * mired + 5.8241927836322316e-01
  else:
    r = 1.0000000000000000e+00

  # calculate green channel
  if mired < 1.5338754141792595e+02:
    g = -3.2321897199199742e-09
    g = g * mired + 5.6229859458935422e-06
    g = g * mired + 1.0736684703150428e-03
    g = g * mired + 6.9132967592603356e-01
  else:
    g = -2.8970739354742214e-15
    g = g * mired + 7.5118920738903285e-12
    g = g * mired + -8.1334149681729280e-09
    g = g * mired + 5.1275902701242465e-06
    g = g * mired + -2.8328836538896456e-03
    g = g * mired + 1.3159772306782269e+00

  # calculate blue channel
  if mired < 1.5267073067425383e+02:
    b = 1.0000000000000000e+00
  elif mired < 5.2602388204624049e+02:
    b = -3.6736690480872570e-19
    b = b * mired + -1.1802030908428046e-15
    b = b * mired + 3.0843359830989135e-12
    b = b * mired + -2.6236655716673167e-09
    b = b * mired + 1.0985390472985008e-06
    b = b * mired + -2.3886775916664285e-04
    b = b * mired + 2.1727267949949183e-02
    b = b * mired + 5.2655589017128124e-01
  else:
    b = 0.0000000000000000e+00

  return numpy.array([r, g, b], numpy.double)

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  RGB_RED = 0
  RGB_GREEN = 1
  RGB_BLUE = 2
  N_RGB = 3

  if len(sys.argv) < 2:
    print(f'usage: {sys.argv[0]:s} mired')
    print('mired = colour temperature in micro reciprocal degrees Kelvin')
    sys.exit(EXIT_FAILURE)
  mired = float(sys.argv[1])

  rgb = mired_to_rgb(mired)
  print(
    f'mired {mired:.3f} -> RGB ({rgb[RGB_RED]:.6f}, {rgb[RGB_GREEN]:.6f}, {rgb[RGB_BLUE]:.6f})'
  )

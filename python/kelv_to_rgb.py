#!/usr/bin/env python3
# generated by ../prepare/kelv_to_rgb_gen_py.py

import numpy
from kelv_to_uv import kelv_to_uv

# new way: (faster, at least up to interpreter overhead)
from gamma_encode import gamma_encode

# this is precomputed for the particular primaries in use
UVW_to_rgb = numpy.array(
  [
    [1.2503157362970454e+01, -1.2629451881788464e-01, -3.0310684516291997e+00],
    [-4.2295831863542732e+00, 5.3231073838486127e+00, 2.5261433074270845e-01],
    [5.0726516441027609e+00, -1.0258028880296694e+01, 6.4253587491968300e+00]
  ],
  numpy.double
)

def kelv_to_rgb(kelv):
  # find the approximate (u, v) chromaticity of the given Kelvin value
  uv = kelv_to_uv(kelv)

  # add the missing w, to convert the chromaticity from (u, v) to (U, V, W)
  # see https://en.wikipedia.org/wiki/CIE_1960_color_space
  u = uv[0]
  v = uv[1]
  UVW = numpy.array([u, v, 1. - u - v], numpy.double)

  # convert to rgb in the given system (the brightness will be arbitrary)
  rgb = UVW_to_rgb @ UVW

  # low Kelvins are outside the gamut of SRGB and thus must be interpreted,
  # in this simplistic approach we simply clip off the negative blue value
  rgb[rgb < 0.] = 0.

  # normalize the brightness, so that at least one of R, G, or B = 1
  rgb /= numpy.max(rgb)

  # gamma-encode the R, G, B tuple according to the SRGB gamma curve
  # because displaying it on a monitor will gamma-decode it in the process

  # old way: (slower)
  #mask = rgb < .0031308
  #rgb[mask] *= 12.92
  #rgb[~mask] = rgb[~mask] ** (1. / 2.4) * 1.055 - 0.055

  # new way: (faster, at least up to interpreter overhead)
  for i in range(N_RGB):
    rgb[i] = gamma_encode(rgb[i])

  return rgb

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  RGB_RED = 0
  RGB_GREEN = 1
  RGB_BLUE = 2
  N_RGB = 3

  if len(sys.argv) < 2:
    print(f'usage: {sys.argv[0]:s} kelv')
    print('kelv = colour temperature in degrees Kelvin')
    sys.exit(EXIT_FAILURE)
  kelv = float(sys.argv[1])

  rgb = kelv_to_rgb(kelv)
  print(
    f'kelv {kelv:.3f} -> RGB ({rgb[RGB_RED]:.6f}, {rgb[RGB_GREEN]:.6f}, {rgb[RGB_BLUE]:.6f})'
  )

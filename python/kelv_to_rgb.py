#!/usr/bin/env python3
# generated by ../prepare/kelv_to_rgb_gen_py.py

import numpy
from kelv_to_uv import kelv_to_uv

# new way: (faster, at least up to interpreter overhead)
from gamma_encode import gamma_encode

UVL_U = 0
UVL_V = 1
UVL_L = 2
N_UVL = 3

# this is precomputed for the particular primaries in use
UVL_to_rgb = numpy.array(
  [
    [1.5534225814599655e+01, 2.9047739328113171e+00, -3.0310684516292001e+00],
    [-4.4821975170969814e+00, 5.0704930531059027e+00, 2.5261433074270867e-01],
    [-1.3527071050940691e+00, -1.6683387629493524e+01, 6.4253587491968300e+00]
  ],
  numpy.double
)

def kelv_to_rgb(kelv):
  # find the approximate (u, v) chromaticity of the given Kelvin value
  uv = kelv_to_uv(kelv)

  # convert (u, v) to (R, G, B) in an optimized way
  # usually we would calculate w such that u + v + w = 1 and then take
  # (u, v, w) as (U, V, W) noting that brightness is arbitrary, and then
  # multiply through by a UVW -> rgb conversion matrix, but the matrix
  # used here expects L = U + V + W instead of W and L is always 1 here
  rgb = UVL_to_rgb[:, UVL_L] + UVL_to_rgb[:, :UVL_L] @ uv

  # low Kelvins are outside the gamut of SRGB and thus must be interpreted,
  # in this simplistic approach we simply clip off the negative blue value
  rgb[rgb < 0.] = 0.

  # normalize the brightness, so that at least one of R, G, or B = 1
  rgb /= numpy.max(rgb)

  # gamma-encode the R, G, B tuple according to the SRGB gamma curve
  # because displaying it on a monitor will gamma-decode it in the process

  # old way: (slower)
  #mask = rgb < .0031308
  #rgb[mask] *= 12.92
  #rgb[~mask] = rgb[~mask] ** (1. / 2.4) * 1.055 - 0.055

  # new way: (faster, at least up to interpreter overhead)
  for i in range(N_RGB):
    rgb[i] = gamma_encode(rgb[i])

  return rgb

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  RGB_RED = 0
  RGB_GREEN = 1
  RGB_BLUE = 2
  N_RGB = 3

  if len(sys.argv) < 2:
    print(f'usage: {sys.argv[0]:s} kelv')
    print('kelv = colour temperature in degrees Kelvin')
    sys.exit(EXIT_FAILURE)
  kelv = float(sys.argv[1])

  rgb = kelv_to_rgb(kelv)
  print(
    f'kelv {kelv:.3f} -> RGB ({rgb[RGB_RED]:.6f}, {rgb[RGB_GREEN]:.6f}, {rgb[RGB_BLUE]:.6f})'
  )

#!/usr/bin/env python3

import numpy
import ruamel.yaml
import sys
from python_to_numpy import python_to_numpy

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} primaries_in.yml [name]')
  sys.exit(EXIT_FAILURE)
primaries_in = sys.argv[1]
name = sys.argv[2] if len(sys.argv) >= 3 else 'kelv_to_rgb'

yaml = ruamel.yaml.YAML(typ = 'safe')
#numpy.set_printoptions(threshold = numpy.inf)

with open(primaries_in) as fin:
  primaries = python_to_numpy(yaml.load(fin))
UVL_to_rgb = primaries['UVL_to_rgb']

print(
  '''#!/usr/bin/env python3
# generated by ../prepare/kelv_to_rgb_gen_py.py

import numpy
from kelv_to_uv import kelv_to_uv

# new way: (faster, at least up to interpreter overhead)
from gamma_encode import gamma_encode

UVL_U = 0
UVL_V = 1
UVL_L = 2
N_UVL = 3

# this is precomputed for the particular primaries in use
UVL_to_rgb = numpy.array(
  [
    [{0:.16e}, {1:.16e}, {2:.16e}],
    [{3:.16e}, {4:.16e}, {5:.16e}],
    [{6:.16e}, {7:.16e}, {8:.16e}]
  ],
  numpy.double
)

def {9:s}(kelv):
  # find the approximate (u, v) chromaticity of the given Kelvin value
  uv = kelv_to_uv(kelv)

  # convert (u, v) to (R, G, B) in an optimized way
  # usually we would calculate w such that u + v + w = 1 and then take
  # (u, v, w) as (U, V, W) noting that brightness is arbitrary, and then
  # multiply through by a UVW -> rgb conversion matrix, but the matrix
  # used here expects L = U + V + W instead of W and L is always 1 here
  rgb = UVL_to_rgb[:, UVL_L] + UVL_to_rgb[:, :UVL_L] @ uv

  # low Kelvins are outside the gamut of SRGB and thus must be interpreted,
  # in this simplistic approach we simply clip off the negative blue value
  rgb[rgb < 0.] = 0.

  # normalize the brightness, so that at least one of R, G, or B = 1
  rgb /= numpy.max(rgb)

  # gamma-encode the R, G, B tuple according to the SRGB gamma curve
  # because displaying it on a monitor will gamma-decode it in the process

  # old way: (slower)
  #mask = rgb < .0031308
  #rgb[mask] *= 12.92
  #rgb[~mask] = rgb[~mask] ** (1. / 2.4) * 1.055 - 0.055

  # new way: (faster, at least up to interpreter overhead)
  for i in range(N_RGB):
    rgb[i] = gamma_encode(rgb[i])

  return rgb

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  RGB_RED = 0
  RGB_GREEN = 1
  RGB_BLUE = 2
  N_RGB = 3

  if len(sys.argv) < 2:
    print(f'usage: {{sys.argv[0]:s}} kelv')
    print('kelv = colour temperature in degrees Kelvin')
    sys.exit(EXIT_FAILURE)
  kelv = float(sys.argv[1])

  rgb = {10:s}(kelv)
  print(
    f'kelv {{kelv:.3f}} -> RGB ({{rgb[RGB_RED]:.6f}}, {{rgb[RGB_GREEN]:.6f}}, {{rgb[RGB_BLUE]:.6f}})'
  )'''.format(
    UVL_to_rgb[0, 0],
    UVL_to_rgb[0, 1],
    UVL_to_rgb[0, 2],
    UVL_to_rgb[1, 0],
    UVL_to_rgb[1, 1],
    UVL_to_rgb[1, 2],
    UVL_to_rgb[2, 0],
    UVL_to_rgb[2, 1],
    UVL_to_rgb[2, 2],
    name,
    name
  )
)

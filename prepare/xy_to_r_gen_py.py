#!/usr/bin/env python3

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# put utils into path
# temporary until we have proper Python packaging
import os.path
import sys
dirname = os.path.dirname(__file__)
sys.path.append(os.path.join(dirname, '..'))

import numpy
import utils.yaml_io

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

#numpy.set_printoptions(threshold = numpy.inf)

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} xy_to_r_fit_in.yml')
  sys.exit(EXIT_FAILURE)
xy_to_r_fit_in = sys.argv[1]

xy_to_r_fit = utils.yaml_io._import(
  utils.yaml_io.read_file(xy_to_r_fit_in)
)
p = xy_to_r_fit['p']
err = xy_to_r_fit['err']

print(
  f'''#!/usr/bin/env python3
# generated by ../prepare/xy_to_r_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy

XY_x = 0
XY_y = 1
N_XY = 2

EPSILON = 1e-6

# returns approximation to:
#   math.sqrt(x ** 2 + y ** 2)
# x and y cannot both be 0 (minimal r is approximately EPSILON)
# minimax error is up to {numpy.max(err):e} relative (after refinement)
def xy_to_r(xy):
  x = abs(xy[XY_x])
  y = abs(xy[XY_y])

  # initial estimate, by alpha-max-beta-min
  if x < y:
    x, y = y, x
  if y < math.ldexp(x, -2):
    r = {p[0, 0]:.16e} * x + {p[0, 1]:.16e} * y
  elif y < math.ldexp(x, -1):
    r = {p[1, 0]:.16e} * x + {p[1, 1]:.16e} * y
  else:
    r = {p[2, 0]:.16e} * x + {p[2, 1]:.16e} * y

  if r < EPSILON:
    return 0.

  # refine with iteration(s) of Newton's method
  r2 = x * x + y * y
  r = .5 * (r + r2 / r)

  return r

if __name__ == '__main__':
  import numpy
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 3:
    print(f'usage: {{sys.argv[0]:s}} x y')
    print('(x, y) = Euclidean coordinates, calculates r = sqrt(x^2 + y^2)')
    sys.exit(EXIT_FAILURE)
  xy = numpy.array([float(i) for i in sys.argv[1:3]], numpy.double)

  r = xy_to_r(xy)
  print(f'xy ({{xy[XY_x]:.6f}}, {{xy[XY_y]:.6f}}) -> r {{r:.6f}}')'''
)

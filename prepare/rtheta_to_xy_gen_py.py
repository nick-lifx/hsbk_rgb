#!/usr/bin/env python3

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy
import poly
import ruamel.yaml
import sys
from python_to_numpy import python_to_numpy

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} rtheta_to_xy_fit_in.yml')
  sys.exit(EXIT_FAILURE)
rtheta_to_xy_fit_in = sys.argv[1]

yaml = ruamel.yaml.YAML(typ = 'safe')
#numpy.set_printoptions(threshold = numpy.inf)

with open(rtheta_to_xy_fit_in) as fin:
  rtheta_to_xy_fit = python_to_numpy(yaml.load(fin))
p = rtheta_to_xy_fit['p']
p_err = rtheta_to_xy_fit['p_err']
q = rtheta_to_xy_fit['q']
q_err = rtheta_to_xy_fit['q_err']

# rescale domain to compensate for range reduction code on entry
theta_scale = 2. / math.pi
r = numpy.array([0., 1. / theta_scale ** 2], numpy.double)
p = poly.compose(p, r)
q = poly.compose(q, r) / theta_scale

print(
  '''#!/usr/bin/env python3
# generated by ../prepare/rtheta_to_xy_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy

XY_x = 0
XY_y = 1
N_XY = 2

RTHETA_r = 0
RTHETA_theta = 1
N_RTHETA = 2

# returns approximation to:
#   r * math.cos(theta), r * math.sin(theta)
# minimax error is up to {0:e} resp. {1:e} on domain [-pi/4, pi/4)
def rtheta_to_xy(rtheta):
  r = rtheta[RTHETA_r]
  theta = rtheta[RTHETA_theta]

  theta *= {2:.16e}
  i = int(round(theta))
  theta -= i
  theta2 = theta * theta

  x = {3:.16e}
{4:s}
  y = {5:.16e}
{6:s}  y *= theta

  if i & 1:
    x, y = -y, x
  if i & 2:
    x = -x
    y = -y

  return r * numpy.array([x, y], numpy.double)

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 3:
    print(f'usage: {{sys.argv[0]:s}} x y')
    print('(r, theta) = polar coordinates, calculates (x, y) = Euclidean coordinates')
    sys.exit(EXIT_FAILURE)
  rtheta = numpy.array([float(i) for i in sys.argv[1:3]], numpy.double)

  xy = rtheta_to_xy(rtheta)
  print(f'rtheta ({{rtheta[RTHETA_r]:.6f}}, {{rtheta[RTHETA_theta]:.6f}}) -> xy ({{xy[XY_x]:.6f}}, {{xy[XY_y]:.6f}})')'''.format(
    p_err,
    q_err,
    theta_scale,
    p[-1],
    ''.join(
      [
        '  x = x * theta2 {0:s} {1:.16e}\n'.format(
          '-' if p[i] < 0. else '+',
          abs(p[i])
        )
        for i in range(p.shape[0] - 2, -1, -1)
      ]
    ),
    q[-1],
    ''.join(
      [
        '  y = y * theta2 {0:s} {1:.16e}\n'.format(
          '-' if q[i] < 0. else '+',
          abs(q[i])
        )
        for i in range(q.shape[0] - 2, -1, -1)
      ]
    )
  )
)

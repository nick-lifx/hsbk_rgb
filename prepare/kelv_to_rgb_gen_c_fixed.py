#!/usr/bin/env python3

import math
import numpy
import ruamel.yaml
import sys
from python_to_numpy import python_to_numpy

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

EPSILON = 1e-8

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} UVW_to_rgb_in.yml [name]')
  sys.exit(EXIT_FAILURE)
UVW_to_rgb_in = sys.argv[1]
name = sys.argv[2] if len(sys.argv) >= 3 else 'kelv_to_rgb'

yaml = ruamel.yaml.YAML(typ = 'safe')
#numpy.set_printoptions(threshold = numpy.inf)

with open(UVW_to_rgb_in) as fin:
  UVW_to_rgb = python_to_numpy(yaml.load(fin))

# RGB extrema can only occur at UVW = (0, 0, 1), (0, 1, 0) or (1, 0, 0)
_, exp = numpy.frexp(UVW_to_rgb * (1. + EPSILON))
UVW_to_rgb_exp = numpy.max(exp) - 31
UVW_to_rgb = numpy.round(
  numpy.ldexp(UVW_to_rgb, -UVW_to_rgb_exp)
).astype(numpy.int32)

def to_hex(x):
  return '{0:s}0x{1:x}'.format('' if x >= 0 else '-', abs(x))
print(
  '''// generated by ../prepare/kelv_to_rgb_gen_c_fixed.py

#include "gamma_encode.h"
#include "kelv_to_rgb.h"
#include "kelv_to_uv.h"

#define UVW_U 0
#define UVW_V 1
#define UVW_W 2
#define N_UVW 3

#define RGB_RED 0
#define RGB_GREEN 1
#define RGB_BLUE 2
#define N_RGB 3

// this is precomputed for the particular primaries in use
int32_t UVW_to_rgb[N_RGB][N_UVW] = {{
  {{{0:s}, {1:s}, {2:s}}},
  {{{3:s}, {4:s}, {5:s}}},
  {{{6:s}, {7:s}, {8:s}}}
}};

// kelv in 16:16 fixed point, results in 2:30 fixed point
void {9:s}(int32_t kelv, int32_t *rgb) {{
  // find the approximate (u, v) chromaticity of the given Kelvin value
  int32_t UVW[N_UVW];
  kelv_to_uv(kelv, UVW);

  // add the missing w, to convert the chromaticity from (u, v) to (U, V, W)
  // see https://en.wikipedia.org/wiki/CIE_1960_color_space
  UVW[UVW_W] = (1 << 30) - UVW[UVW_U] - UVW[UVW_V];

  // convert to rgb in the given system (the brightness will be arbitrary)
  // rgb has the scaling of columns of UVW_to_rgb until normalization below
  for (int i = 0; i < N_RGB; ++i) {{
    int64_t v = 1 << 29;
    for (int j = 0; j < N_UVW; ++j)
      v += (int64_t)UVW_to_rgb[i][j] * UVW[j];
    rgb[i] = (int32_t)(v >> 30);
  }}

  // low Kelvins are outside the gamut of SRGB and thus must be interpreted,
  // in this simplistic approach we simply clip off the negative blue value
  for (int i = 0; i < N_RGB; ++i)
    if (rgb[i] < 0)
      rgb[i] = 0;

  // normalize the brightness, so that at least one of R, G, or B = 1
  int32_t max_rgb = rgb[RGB_RED];
  if (rgb[RGB_GREEN] > max_rgb)
    max_rgb = rgb[RGB_GREEN];
  if (rgb[RGB_BLUE] > max_rgb)
    max_rgb = rgb[RGB_BLUE];
  for (int i = 0; i < N_RGB; ++i)
    rgb[i] = (int32_t)((((int64_t)rgb[i] << 31) / max_rgb + 1) >> 1);

  // gamma-encode the R, G, B tuple according to the SRGB gamma curve
  // because displaying it on a monitor will gamma-decode it in the process
  for (int i = 0; i < N_RGB; ++i)
    rgb[i] = gamma_encode(rgb[i]);
}}

#ifdef STANDALONE
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s kelv\\n"
        "kelv = colour temperature in degrees Kelvin\\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  int32_t kelv = (int32_t)ldexpf(atof(argv[1]), 16);

  int32_t rgb[N_RGB];
  {10:s}(kelv, rgb);
  printf(
    "kelv %.3f -> RGB (%.6f, %.6f, %.6f)\\n",
    ldexpf(kelv, -16),
    ldexpf(rgb[RGB_RED], -30),
    ldexpf(rgb[RGB_GREEN], -30),
    ldexpf(rgb[RGB_BLUE], -30)
  );

  return EXIT_SUCCESS;
}}
#endif'''.format(
    to_hex(UVW_to_rgb[0, 0]),
    to_hex(UVW_to_rgb[0, 1]),
    to_hex(UVW_to_rgb[0, 2]),
    to_hex(UVW_to_rgb[1, 0]),
    to_hex(UVW_to_rgb[1, 1]),
    to_hex(UVW_to_rgb[1, 2]),
    to_hex(UVW_to_rgb[2, 0]),
    to_hex(UVW_to_rgb[2, 1]),
    to_hex(UVW_to_rgb[2, 2]),
    name,
    name
  )
)

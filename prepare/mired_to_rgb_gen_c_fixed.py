#!/usr/bin/env python3

import math
import numpy
import ruamel.yaml
import sys
from poly_fixed import poly_fixed
from python_to_numpy import python_to_numpy

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

# independent variable in 16:16 fixed point
MIRED_EXP = -16

# results in 2:30 fixed point
RGB_EXP = -30

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} mired_to_rgb_fit_in.yml [name]')
  sys.exit(EXIT_FAILURE)
mired_to_rgb_fit_in = sys.argv[1]
name = sys.argv[2] if len(sys.argv) >= 3 else 'mired_to_rgb'

yaml = ruamel.yaml.YAML(typ = 'safe')
#numpy.set_printoptions(threshold = numpy.inf)

with open(mired_to_rgb_fit_in) as fin:
  mired_to_rgb_fit = python_to_numpy(yaml.load(fin))
a = mired_to_rgb_fit['a']
b_red = mired_to_rgb_fit['b_red']
b_green = mired_to_rgb_fit['b_green']
b_blue = mired_to_rgb_fit['b_blue']
c_blue = mired_to_rgb_fit['c_blue']
d = mired_to_rgb_fit['d']
p_red_ab = mired_to_rgb_fit['p_red_ab']
p_red_bd = mired_to_rgb_fit['p_red_bd']
p_green_ab = mired_to_rgb_fit['p_green_ab']
p_green_bd = mired_to_rgb_fit['p_green_bd']
p_blue_ab = mired_to_rgb_fit['p_blue_ab']
p_blue_bc = mired_to_rgb_fit['p_blue_bc']
p_blue_cd = mired_to_rgb_fit['p_blue_cd']

p_red_ab, p_shr_red_ab, _ = poly_fixed(
  p_red_ab,
  a,
  b_red,
  MIRED_EXP,
  31,
  RGB_EXP
)
p_red_bd, p_shr_red_bd, _ = poly_fixed(
  p_red_bd,
  b_red,
  d,
  MIRED_EXP,
  31,
  RGB_EXP
)

p_green_ab, p_shr_green_ab, _ = poly_fixed(
  p_green_ab,
  a,
  b_green,
  MIRED_EXP,
  31,
  RGB_EXP
)
p_green_bd, p_shr_green_bd, _ = poly_fixed(
  p_green_bd,
  b_green,
  d,
  MIRED_EXP,
  31,
  RGB_EXP
)

p_blue_ab, p_shr_blue_ab, _ = poly_fixed(
  p_blue_ab,
  a,
  b_blue,
  MIRED_EXP,
  31,
  RGB_EXP
)
p_blue_bc, p_shr_blue_bc, _ = poly_fixed(
  p_blue_bc,
  b_blue,
  c_blue,
  MIRED_EXP,
  31,
  RGB_EXP
)
p_blue_cd, p_shr_blue_cd, _ = poly_fixed(
  p_blue_cd,
  c_blue,
  d,
  MIRED_EXP,
  31,
  RGB_EXP
)

def to_hex(x):
  return '{0:s}0x{1:x}'.format('' if x >= 0 else '-', abs(x))
print(
  '''// generated by ../prepare/mired_to_rgb_gen_c_fixed.py

#include <assert.h>
#include "mired_to_rgb.h"

#define RGB_RED 0
#define RGB_GREEN 1
#define RGB_BLUE 2
#define N_RGB 3

#define EPSILON 0x40

void {0:s}(int32_t mired, int32_t *rgb) {{
  // validate inputs, allowing a little slack
  assert(mired >= {1:s} - EPSILON && mired < {2:s} + EPSILON);

  // calculate red channel
  int32_t r;
  if (mired < {3:s}) {{
    r = {4:s};
{5:s}  }}
  else {{
    r = {6:s};
{7:s}  }}
  rgb[RGB_RED] = r;

  // calculate green channel
  int32_t g;
  if (mired < {8:s}) {{
    g = {9:s};
{10:s}  }}
  else {{
    g = {11:s};
{12:s}  }}
  rgb[RGB_GREEN] = g;

  // calculate blue channel
  int32_t b;
  if (mired < {13:s}) {{
    b = {14:s};
{15:s}  }}
  else if (mired < {16:s}) {{
    b = {17:s};
{18:s}  }}
  else {{
    b = {19:s};
{20:s}  }}
  rgb[RGB_BLUE] = b;
}}

#ifdef STANDALONE
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s mired\\n"
        "mired = colour temperature in micro reciprocal degrees Kelvin\\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  int32_t mired = (int32_t)roundf(ldexpf(atof(argv[1]), 16));

  int32_t rgb[N_RGB];
  {21:s}(mired, rgb);
  printf(
    "mired %.3f -> RGB (%.6f, %.6f, %.6f)\\n",
    ldexpf(mired, -16),
    ldexpf(rgb[RGB_RED], -30),
    ldexpf(rgb[RGB_GREEN], -30),
    ldexpf(rgb[RGB_BLUE], -30)
  );

  return EXIT_SUCCESS;
}}
#endif'''.format(
    name,
    to_hex(int(round(math.ldexp(a, -MIRED_EXP)))),
    to_hex(int(round(math.ldexp(d, -MIRED_EXP)))),
    to_hex(int(round(math.ldexp(b_red, -MIRED_EXP)))),
    to_hex(p_red_ab[-1]),
    ''.join(
      [
        '    r = (int32_t)(((int64_t)r * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_red_ab[i] < 0. else '+',
          abs(p_red_ab[i]),
          p_shr_red_ab[i]
        )
        for i in range(p_red_ab.shape[0] - 2, -1, -1)
      ]
    ),
    to_hex(p_red_bd[-1]),
    ''.join(
      [
        '    r = (int32_t)(((int64_t)r * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_red_bd[i] < 0. else '+',
          abs(p_red_bd[i]),
          p_shr_red_bd[i]
        )
        for i in range(p_red_bd.shape[0] - 2, -1, -1)
      ]
    ),
    to_hex(int(round(math.ldexp(b_green, -MIRED_EXP)))),
    to_hex(p_green_ab[-1]),
    ''.join(
      [
        '    g = (int32_t)(((int64_t)g * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_green_ab[i] < 0. else '+',
          abs(p_green_ab[i]),
          p_shr_green_ab[i]
        )
        for i in range(p_green_ab.shape[0] - 2, -1, -1)
      ]
    ),
    to_hex(p_green_bd[-1]),
    ''.join(
      [
        '    g = (int32_t)(((int64_t)g * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_green_bd[i] < 0. else '+',
          abs(p_green_bd[i]),
          p_shr_green_bd[i]
        )
        for i in range(p_green_bd.shape[0] - 2, -1, -1)
      ]
    ),
    to_hex(int(round(math.ldexp(b_blue, -MIRED_EXP)))),
    to_hex(p_blue_ab[-1]),
    ''.join(
      [
        '    b = (int32_t)(((int64_t)b * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_blue_ab[i] < 0. else '+',
          abs(p_blue_ab[i]),
          p_shr_blue_ab[i]
        )
        for i in range(p_blue_ab.shape[0] - 2, -1, -1)
      ]
    ),
    to_hex(int(round(math.ldexp(c_blue, -MIRED_EXP)))),
    to_hex(p_blue_bc[-1]),
    ''.join(
      [
        '    b = (int32_t)(((int64_t)b * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_blue_bc[i] < 0. else '+',
          abs(p_blue_bc[i]),
          p_shr_blue_bc[i]
        )
        for i in range(p_blue_bc.shape[0] - 2, -1, -1)
      ]
    ),
    to_hex(p_blue_cd[-1]),
    ''.join(
      [
        '    b = (int32_t)(((int64_t)b * mired {0:s} 0x{1:x}LL) >> {2:d});\n'.format(
          '-' if p_blue_cd[i] < 0. else '+',
          abs(p_blue_cd[i]),
          p_shr_blue_cd[i]
        )
        for i in range(p_blue_cd.shape[0] - 2, -1, -1)
      ]
    ),
    name
  )
)

#!/usr/bin/env python3

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import numpy
import ruamel.yaml
import sys
from python_to_numpy import python_to_numpy

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} gamma_encode_fit_in.yml [name]')
  sys.exit(EXIT_FAILURE)
gamma_encode_fit_in = sys.argv[1]
name = sys.argv[2] if len(sys.argv) >= 3 else 'gamma_encode'

yaml = ruamel.yaml.YAML(typ = 'safe')
#numpy.set_printoptions(threshold = numpy.inf)

with open(gamma_encode_fit_in) as fin:
  gamma_encode_fit = python_to_numpy(yaml.load(fin))
p = gamma_encode_fit['p']
err = gamma_encode_fit['err']
exp0 = gamma_encode_fit['exp0']
exp1 = gamma_encode_fit['exp1']
post_factor = gamma_encode_fit['post_factor']

print(
  '''#!/usr/bin/env python3
# generated by ../prepare/gamma_encode_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import math
import numpy

post_factor = numpy.array(
  [{0:s}
  ],
  numpy.double
)

# returns approximation to:
#   x * 12.92 if x < .0031308 else (x ** (1. / 2.4) * 1.055) - .055
# allowed domain (-inf, 2), recommended domain [-epsilon, 1 + epsilon]
# do not call with argument >= 2 due to table lookup overflow (unchecked)
# minimax error is up to {1:e} on domain [.5, 1]
def {2:s}(x):
  if x < .0031308:
    return x * 12.92
  x, exp = math.frexp(x)
  assert exp < {3:d}
  y = {4:.16e}
{5:s}  return y * post_factor[exp + {6:d}] - .055

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 2:
    print(f'usage: {{sys.argv[0]:s}} x')
    print('x = linear intensity, calculates gamma encoded intensity')
    sys.exit(EXIT_FAILURE)
  x = float(sys.argv[1])

  y = {7:s}(x)
  print(f'linear {{x:.6f}} -> gamma encoded {{y:.6f}}')'''.format(
    ','.join(
      [
        f'\n    {post_factor[i]:.16e}'
        for i in range(post_factor.shape[0])
      ]
    ),
    err,
    name,
    exp1 + 1,
    p[-1],
    ''.join(
      [
        '  y = y * x {0:s} {1:.16e}\n'.format(
          '-' if p[i] < 0. else '+',
          abs(p[i])
        )
        for i in range(p.shape[0] - 2, -1, -1)
      ]
    ),
    -exp0,
    name
  )
)

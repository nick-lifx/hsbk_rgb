#!/usr/bin/env python3

import math
import numpy
from poly_fixed import poly_fixed

ORDER = 3
EPSILON = 1e-8

# independent variable in 16:16 fixed point
KELV_EXP = -16
KELV_MIN = 1000.
KELV_MAX = 15000.

# results in 2:30 fixed point
U_EXP = -30
V_EXP = -30

c_u_num, shr_u_num, exp_u_num = poly_fixed(
  numpy.array([.860117757, 1.54118254e-4, 1.28641212e-7], numpy.double),
  KELV_MIN,
  KELV_MAX,
  KELV_EXP,
  31
)
c_u_denom, shr_u_denom, exp_u_denom = poly_fixed(
  numpy.array([1., 8.42420235e-4, 7.08145163e-7], numpy.double),
  KELV_MIN,
  KELV_MAX,
  KELV_EXP,
  31
)
c_v_num, shr_v_num, exp_v_num = poly_fixed(
  numpy.array([.317398726, 4.22806245e-5, 4.20481691e-8], numpy.double),
  KELV_MIN,
  KELV_MAX,
  KELV_EXP,
  31
)
c_v_denom, shr_v_denom, exp_v_denom = poly_fixed(
  numpy.array([1., -2.89741816e-5, 1.61456053e-7], numpy.double),
  KELV_MIN,
  KELV_MAX,
  KELV_EXP,
  31
)

# make sure we can divide u_num by u_denom and v_num by v_denom
# maximum we can shift by is 32, but allow one less for rounding
div_shift_u = exp_u_num - exp_u_denom - U_EXP
assert div_shift_u >= 0 and div_shift_u < 32
div_shift_v = exp_v_num - exp_v_denom - V_EXP
assert div_shift_v >= 0 and div_shift_v < 32

print(
  '''// generated by ../prepare/kelv_to_uv_gen_c_fixed.py

#include <assert.h>
#include "kelv_to_uv.h"

#define UV_u 0
#define UV_v 1
#define N_UV 2

// kelv in 16:16 fixed point, results in 2:30 fixed point
void kelv_to_uv(int32_t kelv, int32_t *uv) {{
  // validate inputs, allowing a little slack
  assert(kelv >= 0x{0:x} && kelv < 0x{1:x});

  // find the approximate (u, v) chromaticity of the given Kelvin value
  // see http://en.wikipedia.org/wiki/Planckian_locus#Approximation (Krystek)
  // we evaluate this with Horner's rule for better numerical stability
  int32_t u = 0x{2:x};
  u = (int32_t)(((int64_t)u * kelv + 0x{3:x}LL) >> {4:d});
  u = (int32_t)(((int64_t)u * kelv + 0x{5:x}LL) >> {6:d});
  int32_t u_denom = 0x{7:x};
  u_denom = (int32_t)(((int64_t)u_denom * kelv + 0x{8:x}LL) >> {9:d});
  u_denom = (int32_t)(((int64_t)u_denom * kelv + 0x{10:x}LL) >> {11:d});
  uv[UV_u] = (int32_t)((((int64_t)u << {12:d}) / u_denom + 1) >> 1);

  int32_t v = 0x{13:x};
  v = (int32_t)(((int64_t)v * kelv + 0x{14:x}LL) >> {15:d});
  v = (int32_t)(((int64_t)v * kelv + 0x{16:x}LL) >> {17:d});
  int32_t v_denom = 0x{18:x};
  v_denom = (int32_t)(((int64_t)v_denom * kelv - 0x{19:x}LL) >> {20:d});
  v_denom = (int32_t)(((int64_t)v_denom * kelv + 0x{21:x}LL) >> {22:d});
  uv[UV_v] = (int32_t)((((int64_t)v << {23:d}) / v_denom + 1) >> 1);
}}

#ifdef STANDALONE
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s kelv\\n"
        "kelv = colour temperature in degrees Kelvin\\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  int32_t kelv = (int32_t)roundf(ldexpf(atof(argv[1]), 16));

  int32_t uv[N_UV];
  kelv_to_uv(kelv, uv);
  printf(
    "kelv %.3f -> uv (%.6f, %.6f)\\n",
    ldexpf(kelv, -16),
    ldexpf(uv[UV_u], -30),
    ldexpf(uv[UV_v], -30)
  );

  return EXIT_SUCCESS;
}}
#endif'''.format(
    int(round(math.ldexp(KELV_MIN * (1. - EPSILON), -KELV_EXP))),
    int(round(math.ldexp(KELV_MAX * (1. + EPSILON), -KELV_EXP))),
    c_u_num[2],
    c_u_num[1],
    shr_u_num[1],
    c_u_num[0],
    shr_u_num[0],
    c_u_denom[2],
    c_u_denom[1],
    shr_u_denom[1],
    c_u_denom[0],
    shr_u_denom[0],
    div_shift_u + 1,
    c_v_num[2],
    c_v_num[1],
    shr_v_num[1],
    c_v_num[0],
    shr_v_num[0],
    c_v_denom[2],
    -c_v_denom[1],
    shr_v_denom[1],
    c_v_denom[0],
    shr_v_denom[0],
    div_shift_v + 1
  )
)

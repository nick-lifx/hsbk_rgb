#!/usr/bin/env python3

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import numpy
import ruamel.yaml
import sys
from python_to_numpy import python_to_numpy

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

RGB_RED = 0
RGB_GREEN = 1
RGB_BLUE = 2
N_RGB = 3

UVL_U = 0
UVL_u = 0
UVL_V = 1
UVL_v = 1
UVL_L = 2
N_UVL = 3

if len(sys.argv) < 4:
  print(f'usage: {sys.argv[0]:s} model_in.yml gamma_curve device')
  sys.exit(EXIT_FAILURE)
model_in = sys.argv[1]
gamma_curve = sys.argv[2]
device = sys.argv[3]

yaml = ruamel.yaml.YAML(typ = 'safe')
#numpy.set_printoptions(threshold = numpy.inf)

with open(model_in) as fin:
  model = python_to_numpy(yaml.load(fin))
primaries_uvL = model['primaries_uvL']

u = primaries_uvL[:, UVL_u]
v = primaries_uvL[:, UVL_v]
L = primaries_uvL[:, UVL_L]
primaries_UVW = numpy.stack([u, v, 1. - u - v], 1) * L[:, numpy.newaxis]

# create a special version in which L = U + V + W
# this makes it easier to convert uv <-> RGB directly
# note: UVL differs from uvL as U, V are scaled by the L
rgb_to_UVL = numpy.array(
  [
    [1., 0., 0.],
    [0., 1., 0.],
    [1., 1., 1.]
  ],
  numpy.double
) @ primaries_UVW.transpose()

print(
  '''#!/usr/bin/env python3
# generated by ../prepare/rgb_to_uv_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import numpy
from gamma_decode_{0:s} import gamma_decode_{1:s}

RGB_RED = 0
RGB_GREEN = 1
RGB_BLUE = 2
N_RGB = 3

UVL_U = 0
UVL_V = 1
UVL_L = 2
N_UVL = 3

EPSILON = 1e-6

# this is precomputed for the particular primaries in use
rgb_to_UVL = numpy.array(
  [
    [{2:.16e}, {3:.16e}, {4:.16e}],
    [{5:.16e}, {6:.16e}, {7:.16e}],
    [{8:.16e}, {9:.16e}, {10:.16e}]
  ],
  numpy.double
)

def rgb_to_uv_{11:s}(rgb):
  # validate inputs, allowing a little slack
  assert numpy.all(rgb >= -EPSILON) and numpy.all(rgb < 1. + EPSILON)
  assert numpy.sum(rgb) >= EPSILON

  UVL = rgb_to_UVL @ numpy.array(
    [gamma_decode_{12:s}(rgb[i]) for i in range(N_RGB)],
    numpy.double
  )
  return UVL[:UVL_L] / UVL[UVL_L]

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  UV_u = 0
  UV_v = 1
  N_UV = 2

  if len(sys.argv) < 4:
    print(f'usage: {{sys.argv[0]:s}} R G B')
    print('R = red channel as fraction (0 to 1)')
    print('G = green channel as fraction (0 to 1)')
    print('B = blue channel as fraction (0 to 1)')
    print('R, G and B cannot all be 0')
    sys.exit(EXIT_FAILURE)
  rgb = numpy.array([float(i) for i in sys.argv[1:4]], numpy.double)

  uv = rgb_to_uv_{13:s}(rgb)
  print(
    f'RGB ({{rgb[RGB_RED]:.6f}}, {{rgb[RGB_GREEN]:.6f}}, {{rgb[RGB_BLUE]:.6f}}) -> uv ({{uv[UV_u]:.6f}}, {{uv[UV_v]:.6f}})'
  )'''.format(
    gamma_curve,
    gamma_curve,
    rgb_to_UVL[UVL_U, RGB_RED],
    rgb_to_UVL[UVL_U, RGB_GREEN],
    rgb_to_UVL[UVL_U, RGB_BLUE],
    rgb_to_UVL[UVL_V, RGB_RED],
    rgb_to_UVL[UVL_V, RGB_GREEN],
    rgb_to_UVL[UVL_V, RGB_BLUE],
    rgb_to_UVL[UVL_L, RGB_RED],
    rgb_to_UVL[UVL_L, RGB_GREEN],
    rgb_to_UVL[UVL_L, RGB_BLUE],
    device,
    gamma_curve,
    device 
  )
)

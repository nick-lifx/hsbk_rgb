#!/usr/bin/env python3

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# put utils into path
# temporary until we have proper Python packaging
import os.path
import sys
dirname = os.path.dirname(__file__)
sys.path.append(os.path.join(dirname, '..'))

import math
import mpmath
import numpy
import utils.yaml_io

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

mpmath.mp.prec = 106

#numpy.set_printoptions(threshold = numpy.inf)

if len(sys.argv) < 2:
  print(f'usage: {sys.argv[0]:s} xy_to_rtheta_fit_in.yml')
  sys.exit(EXIT_FAILURE)
xy_to_rtheta_fit_in = sys.argv[1]

xy_to_rtheta_fit = utils.yaml_io._import(
  utils.yaml_io.read_file(xy_to_rtheta_fit_in)
)
p = xy_to_rtheta_fit['p']
p_err = xy_to_rtheta_fit['p_err']
q = xy_to_rtheta_fit['q']
q_err = xy_to_rtheta_fit['q_err']

p = numpy.array(p, numpy.double)
q = numpy.array(q, numpy.double)

print(
  '''#!/usr/bin/env python3
# generated by ../prepare/xy_to_rtheta_gen_py.py

# Copyright (c) 2020 Nick Downing
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# put utils into path
# temporary until we have proper Python packaging
import os.path
import sys
dirname = os.path.dirname(__file__)
sys.path.append(os.path.join(dirname, '..'))

import math
import numpy

XY_x = 0
XY_y = 1
N_XY = 2

RTHETA_r = 0
RTHETA_theta = 1
N_RTHETA = 2

# returns approximation to:
#   math.sqrt(x ** 2 + y ** 2), atan2(y, x)
# x and y cannot both be 0 (but can be arbitrarily small)
# minimax error is up to {0:e} relative resp. {1:e} absolute
def xy_to_rtheta(xy):
  x = xy[XY_x]
  y = xy[XY_y]

  theta = 0.
  if y >= x:
    theta = {2:.16e} if y >= 0. else {3:.16e}
    x = -x
    y = -y
  if y < -x:
    theta -= {4:.16e}
    x, y = -y, x

  slope = y / x
  slope2 = slope * slope

  r = {5:.16e}
{6:s}
  s = {7:.16e}
{8:s}  s *= slope

  return numpy.array([x * r, theta + s], numpy.double)

if __name__ == '__main__':
  import sys

  EXIT_SUCCESS = 0
  EXIT_FAILURE = 1

  if len(sys.argv) < 3:
    print(f'usage: {{sys.argv[0]:s}} x y')
    print('(x, y) = Euclidean coordinates, calculates (r, theta) = polar coordinates')
    print('x, y cannot both be 0')
    sys.exit(EXIT_FAILURE)
  xy = numpy.array([float(i) for i in sys.argv[1:3]], numpy.double)

  rtheta = xy_to_rtheta(xy)
  print(f'xy ({{xy[XY_x]:.6f}}, {{xy[XY_y]:.6f}}) -> rtheta ({{rtheta[RTHETA_r]:.6f}}, {{rtheta[RTHETA_theta]:.6f}})')'''.format(
    p_err,
    q_err,
    math.pi,
    -math.pi,
    .5 * math.pi,
    p[-1],
    ''.join(
      [
        '  r = r * slope2 {0:s} {1:.16e}\n'.format(
          '-' if p[i] < 0. else '+',
          abs(p[i])
        )
        for i in range(p.shape[0] - 2, -1, -1)
      ]
    ),
    q[-1],
    ''.join(
      [
        '  s = s * slope2 {0:s} {1:.16e}\n'.format(
          '-' if q[i] < 0. else '+',
          abs(q[i])
        )
        for i in range(q.shape[0] - 2, -1, -1)
      ]
    )
  )
)

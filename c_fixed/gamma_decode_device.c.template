// generated by ../prepare/gamma_decode_gen_c_fixed.py

// Copyright (c) 2020 Nick Downing
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#include "gamma_decode_{0:s}.h"

static int32_t post_factor[] = {{{1:s}
}};

// argument and result in 2:30 fixed point
// returns approximation to:
//   x < {2:s}f * {3:s}f ? x / {4:s}f : powf((x + {5:s}f) / {6:s}f, {7:s}f)
// allowed domain (-inf, {8:s}), recommended domain [-epsilon, 1 + epsilon)
// do not call with argument >= {9:s} due to table lookup overflow (unchecked)
// minimax error is up to {10:e} relative
int32_t gamma_decode_{11:s}(int32_t x) {{
  if (x < {12:s})
    return (int32_t)((x * {13:s}LL + {14:s}LL) >> {15:d});
  x += {16:s};
  int exp = {17:d};
  if ((x & 0x78000000) == 0) {{
    x <<= 4;
    exp -= 4;
  }}
  if ((x & 0x60000000) == 0) {{
    x <<= 2;
    exp -= 2;
  }}
  if ((x & 0x40000000) == 0) {{
    x <<= 1;
    exp -= 1;
  }}
  int32_t y = {18:s};
{19:s}  return (int32_t)(((int64_t)y * post_factor[exp] + {20:s}LL) >> {21:d});
}}

#ifdef STANDALONE
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s x\n"
        "x = gamma encoded intensity, calculates linear intensity\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  int32_t x = (int32_t)roundf(ldexpf(atof(argv[1]), 30));

  int32_t y = gamma_decode_{22:s}(x);
  printf("gamma encoded %.6f -> linear %.6f\n", ldexpf(x, -30), ldexpf(y, -30));

  return EXIT_SUCCESS;
}}
#endif

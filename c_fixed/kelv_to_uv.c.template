// generated by ../prepare/kelv_to_uv_gen_c_fixed.py

// Copyright (c) 2020 Nick Downing
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#include <assert.h>
#include "kelv_to_uv.h"

#define UV_u 0
#define UV_v 1
#define N_UV 2

// kelv in 16:16 fixed point, results in 2:30 fixed point
void kelv_to_uv(int32_t kelv, int32_t *uv) {{
  // validate inputs, allowing a little slack
  assert(kelv >= {kelv_min:s} && kelv < {kelv_max:s});

  // find the approximate (u, v) chromaticity of the given Kelvin value
  // see http://en.wikipedia.org/wiki/Planckian_locus#Approximation (Krystek)
  // we evaluate this with Horner's rule for better numerical stability
  int32_t u = {p_u_num2:s};
  u = (int32_t)(((int64_t)u * kelv + {p_u_num1:s}LL) >> {p_u_num_shr1:d});
  u = (int32_t)(((int64_t)u * kelv + {p_u_num0:s}LL) >> {p_u_num_shr0:d});
  int32_t u_denom = {p_u_denom2:s};
  u_denom = (int32_t)(((int64_t)u_denom * kelv + {p_u_denom1:s}LL) >> {p_u_denom_shr1:d});
  u_denom = (int32_t)(((int64_t)u_denom * kelv + {p_u_denom0:s}LL) >> {p_u_denom_shr0:d});
  uv[UV_u] = (int32_t)((((int64_t)u << {div_shl_u_plus_one:d}) / u_denom + 1) >> 1);

  int32_t v = {p_v_num2:s};
  v = (int32_t)(((int64_t)v * kelv + {p_v_num1:s}LL) >> {p_v_num_shr1:d});
  v = (int32_t)(((int64_t)v * kelv + {p_v_num0:s}LL) >> {p_v_num_shr0:d});
  int32_t v_denom = {p_v_denom2:s};
  v_denom = (int32_t)(((int64_t)v_denom * kelv - {minus_p_v_denom1:s}LL) >> {p_v_denom_shr1:d});
  v_denom = (int32_t)(((int64_t)v_denom * kelv + {p_v_denom0:s}LL) >> {p_v_denom_shr0:d});
  uv[UV_v] = (int32_t)((((int64_t)v << {div_shl_v_plus_one:d}) / v_denom + 1) >> 1);
}}

#ifdef STANDALONE
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s kelv\n"
        "kelv = colour temperature in degrees Kelvin\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  int32_t kelv = (int32_t)roundf(ldexpf(atof(argv[1]), 16));

  int32_t uv[N_UV];
  kelv_to_uv(kelv, uv);
  printf(
    "kelv %.3f -> uv (%.6f, %.6f)\n",
    ldexpf(kelv, -16),
    ldexpf(uv[UV_u], -30),
    ldexpf(uv[UV_v], -30)
  );

  return EXIT_SUCCESS;
}}
#endif

// generated by ../prepare/gamma_encode_gen_c_fixed.py

// Copyright (c) 2020 Nick Downing
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#include "gamma_encode_{0:s}.h"

static int32_t post_factor[] = {{{1:s}
}};

// argument and result in 2:30 fixed point
// returns approximation to:
//   x < {2:s}f ? x * {3:s}f : powf(x, 1.f / {4:s}f) * {5:s}f - {6:s}f
// allowed domain [-2, 2), recommended domain [-epsilon, 1 + epsilon)
// minimax error is up to {7:e} relative
int32_t gamma_encode_{8:s}(int32_t x) {{
  if (x < {9:s})
    return (int32_t)((x * {10:s}LL + {11:s}LL) >> {12:d});
  int exp = {13:d};
  if ((x & 0x7f800000) == 0) {{
    x <<= 8;
    exp -= 8;
  }}
  if ((x & 0x78000000) == 0) {{
    x <<= 4;
    exp -= 4;
  }}
  if ((x & 0x60000000) == 0) {{
    x <<= 2;
    exp -= 2;
  }}
  if ((x & 0x40000000) == 0) {{
    x <<= 1;
    exp -= 1;
  }}
  int32_t y = {14:s};
{15:s}  return (int32_t)(((int64_t)y * post_factor[exp] - {16:s}LL) >> {17:d});
}}

#ifdef STANDALONE
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) {{
  if (argc < 2) {{
    printf(
      "usage: %s x\n"
        "x = gamma encoded intensity, calculates linear intensity\n",
      argv[0]
    );
    exit(EXIT_FAILURE);
  }}
  int32_t x = (int32_t)roundf(ldexpf(atof(argv[1]), 30));

  int32_t y = gamma_encode_{18:s}(x);
  printf("gamma encoded %.6f -> linear %.6f\n", ldexpf(x, -30), ldexpf(y, -30));

  return EXIT_SUCCESS;
}}
#endif
